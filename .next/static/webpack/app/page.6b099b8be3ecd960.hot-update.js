"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./src/services/cozeService.ts":
/*!*************************************!*\
  !*** ./src/services/cozeService.ts ***!
  \*************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   sendMessageToCoze: function() { return /* binding */ sendMessageToCoze; }\n/* harmony export */ });\n/**\r\n * cozeService.ts\r\n * Coze API服务 - 处理与Coze API的通信\r\n */ // 错误消息\nconst ERROR_MESSAGES = {\n    NETWORK: \"网络连接失败，请检查您的网络连接。\",\n    SERVER: \"服务器处理请求失败，请稍后重试。\",\n    GENERAL: \"发送消息时出现错误，请稍后重试。\",\n    STREAM: \"流式响应中断，请刷新页面重试。\",\n    API_KEY_MISSING: \"缺少API密钥，请检查环境配置。\",\n    BOT_ID_MISSING: \"缺少机器人ID，请检查环境配置。\",\n    PARAMETER_ERROR: \"API参数错误，请联系开发人员。\"\n};\n/**\r\n * 构建媒体内容为Coze API可接受的格式\r\n * @param media 媒体内容数组\r\n * @returns 转换后的Coze格式媒体内容\r\n */ const formatMediaContent = (media)=>{\n    if (!media || media.length === 0) return [];\n    return media.map((item)=>({\n            type: item.type.toLowerCase(),\n            url: item.url\n        }));\n};\n/**\r\n * 发送消息到Coze API并获取流式响应 (通过本地API代理)\r\n *\r\n * @param message 用户消息内容\r\n * @param media 媒体内容数组\r\n * @param onChunk 接收数据块的回调函数\r\n * @param onComplete 响应完成的回调函数\r\n * @returns 清理函数，用于中断请求\r\n */ const sendMessageToCoze = async function(message) {\n    let media = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [], onChunk = arguments.length > 2 ? arguments[2] : void 0, onComplete = arguments.length > 3 ? arguments[3] : void 0;\n    // 创建AbortController用于中断请求\n    const controller = new AbortController();\n    const signal = controller.signal;\n    try {\n        // 构建请求体 - 使用本地API代理，适配Coze API v3\n        const requestBody = {\n            user_id: \"user_\" + Date.now(),\n            messages: [\n                {\n                    role: \"user\",\n                    content: message,\n                    // 如果有媒体内容，则添加到请求中\n                    ...media.length > 0 && {\n                        media: formatMediaContent(media)\n                    }\n                }\n            ],\n            stream: true,\n            auto_save_history: true\n        };\n        console.log(\"准备发送请求到本地API代理:\", \"/api/chat\");\n        console.log(\"请求体:\", JSON.stringify(requestBody));\n        // 发送请求到本地API代理\n        const response = await fetch(\"/api/chat\", {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify(requestBody),\n            signal\n        });\n        console.log(\"API响应状态:\", response.status);\n        console.log(\"API响应头部:\", Object.fromEntries(response.headers.entries()));\n        if (!response.ok) {\n            const errorText = await response.text();\n            console.error(\"API错误:\", response.status, errorText);\n            onChunk(\"服务器返回错误: \".concat(response.status));\n            if (onComplete) onComplete(); // 通知完成（出错）\n            return ()=>controller.abort();\n        }\n        // 检查响应是否支持流式传输\n        if (!response.body) {\n            console.error(\"响应不支持流式传输\");\n            onChunk(ERROR_MESSAGES.STREAM);\n            if (onComplete) onComplete(); // 通知完成（出错）\n            return ()=>controller.abort();\n        }\n        // 处理流式响应\n        const reader = response.body.getReader();\n        const decoder = new TextDecoder();\n        console.log(\"开始处理流式响应\");\n        // 记录收到的总内容（用于调试）\n        let receivedContent = \"\";\n        let hasReceivedContent = false;\n        // 异步处理流数据\n        const processStream = async ()=>{\n            try {\n                let isDone = false;\n                while(!isDone){\n                    const { done, value } = await reader.read();\n                    if (done) {\n                        console.log(\"流式响应完成（读取器返回done）\");\n                        if (!hasReceivedContent) {\n                            console.log(\"整个响应过程中未收到任何有效内容\");\n                            onChunk(\"抱歉，服务器没有返回有效回复。\");\n                        }\n                        if (onComplete) onComplete(); // 通知前端响应已完成\n                        break;\n                    }\n                    // 解码二进制数据\n                    const chunk = decoder.decode(value, {\n                        stream: true\n                    });\n                    console.log(\"收到数据块原始内容:\", chunk);\n                    receivedContent += chunk;\n                    // 尝试不同的解析方式处理SSE格式的数据\n                    try {\n                        // 1. 首先尝试标准的SSE格式解析（data: {...} 格式）\n                        const lines = chunk.split(\"\\n\").filter((line)=>line.trim() !== \"\");\n                        let hasProcessedValidData = false;\n                        for (const line of lines){\n                            console.log(\"处理行:\", line);\n                            try {\n                                // 检查是否为SSE格式\n                                if (line.startsWith(\"data:\")) {\n                                    const jsonStr = line.substring(5).trim();\n                                    // 检查是否为[DONE]标记\n                                    if (jsonStr === \"[DONE]\") {\n                                        console.log(\"收到[DONE]标记，响应结束\");\n                                        isDone = true;\n                                        if (onComplete) onComplete(); // 通知前端响应已完成\n                                        break;\n                                    }\n                                    // 尝试解析JSON数据\n                                    try {\n                                        const data = JSON.parse(jsonStr);\n                                        console.log(\"解析到JSON数据:\", data);\n                                        // 检查是否有错误信息\n                                        if (data.status === \"failed\" && data.last_error) {\n                                            console.error(\"Coze API返回错误:\", data.last_error);\n                                            const errorMsg = data.last_error.code === 4000 ? \"\".concat(ERROR_MESSAGES.PARAMETER_ERROR, \"（错误码：\").concat(data.last_error.code, \"，信息：\").concat(data.last_error.msg, \"）\") : \"错误 \".concat(data.last_error.code, \": \").concat(data.last_error.msg);\n                                            onChunk(errorMsg);\n                                            isDone = true;\n                                            if (onComplete) onComplete();\n                                            break;\n                                        }\n                                        // 处理对话内容响应\n                                        if (data.choices && data.choices.length > 0 && data.choices[0].delta && data.choices[0].delta.content) {\n                                            // 处理官方标准格式（choices.delta.content）\n                                            onChunk(data.choices[0].delta.content);\n                                            hasReceivedContent = true;\n                                            hasProcessedValidData = true;\n                                        } else if (data.content) {\n                                            // 处理兼容格式（content字段）\n                                            onChunk(data.content);\n                                            hasReceivedContent = true;\n                                            hasProcessedValidData = true;\n                                        }\n                                        // 检查响应是否包含完成标志\n                                        if (data.done || data.choices && data.choices.length > 0 && data.choices[0].finish_reason === \"stop\") {\n                                            console.log(\"响应数据包含完成标记\");\n                                            isDone = true;\n                                            if (onComplete) onComplete(); // 通知前端响应已完成\n                                            break;\n                                        }\n                                    } catch (e) {\n                                        console.warn(\"解析JSON数据出错:\", e);\n                                    }\n                                } else if (line.trim().length > 0) {\n                                    // 如果不是data:开头但有内容，可能是直接的文本\n                                    console.log(\"收到非SSE格式数据，尝试直接处理:\", line);\n                                    // 尝试作为JSON解析\n                                    try {\n                                        const data = JSON.parse(line);\n                                        if (data.content) {\n                                            onChunk(data.content);\n                                            hasReceivedContent = true;\n                                            hasProcessedValidData = true;\n                                        }\n                                    } catch (e) {\n                                        // 不是JSON，直接作为文本内容处理\n                                        onChunk(line);\n                                        hasReceivedContent = true;\n                                        hasProcessedValidData = true;\n                                    }\n                                }\n                            } catch (e) {\n                                console.warn(\"处理行数据出错:\", e);\n                            }\n                        }\n                        // 如果没有从标准格式中提取到数据，尝试其他格式\n                        if (!hasProcessedValidData && chunk.trim().length > 0) {\n                            console.log(\"尝试处理非标准格式的整块数据\");\n                            // 3. 尝试整个数据块作为JSON\n                            try {\n                                const data = JSON.parse(chunk.trim());\n                                if (data.content) {\n                                    onChunk(data.content);\n                                    hasReceivedContent = true;\n                                }\n                                if (data.text) {\n                                    onChunk(data.text);\n                                    hasReceivedContent = true;\n                                }\n                                if (data.done) {\n                                    isDone = true;\n                                    if (onComplete) onComplete();\n                                }\n                            } catch (e) {\n                                // 4. 如果不是JSON，可能是纯文本内容\n                                if (chunk.trim().length > 0 && !chunk.includes(\"data:\")) {\n                                    console.log(\"作为纯文本内容处理\");\n                                    onChunk(chunk.trim());\n                                    hasReceivedContent = true;\n                                }\n                            }\n                        }\n                    } catch (error) {\n                        console.error(\"解析流数据块出错:\", error);\n                    }\n                }\n                // 如果流结束但没收到任何内容，发送一个默认消息\n                if (!hasReceivedContent) {\n                    console.log(\"未收到任何内容，发送默认消息\");\n                    onChunk(\"我没有收到有效的回复。请稍后再试。\");\n                }\n                // 流处理完成\n                console.log(\"流处理完成\");\n                if (onComplete) onComplete();\n            } catch (error) {\n                console.error(\"读取流出错:\", error);\n                if (error.name === \"AbortError\") {\n                    console.log(\"请求被中断\");\n                } else {\n                    console.error(\"读取流出错:\", error);\n                    onChunk(ERROR_MESSAGES.STREAM);\n                }\n                if (!hasReceivedContent) {\n                    onChunk(\"处理响应时出错，请稍后再试。\");\n                }\n                if (onComplete) onComplete(); // 通知前端响应已完成（出错）\n            }\n        };\n        // 开始处理流\n        processStream();\n        // 返回清理函数\n        return ()=>{\n            controller.abort();\n            if (onComplete) onComplete(); // 确保取消请求时也通知完成\n        };\n    } catch (error) {\n        console.error(\"请求错误:\", error);\n        if (error.name === \"AbortError\") {\n            console.log(\"请求被中断\");\n        } else {\n            onChunk(ERROR_MESSAGES.NETWORK);\n        }\n        if (onComplete) onComplete(); // 通知前端响应已完成（出错）\n        return ()=>controller.abort();\n    }\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/services/cozeService.ts\n"));

/***/ })

});